"""
Models for the use with LibForeman
"""

from __future__ import division
from __future__ import print_function
from __future__ import with_statement

from collections import namedtuple
from multiprocessing import Process
from orges.args import call

# Datastructure for results generated by the workers
Task = namedtuple("Task", ["f", "args", "vargs"])

# Datastructure for results generated by the workers
Result = namedtuple("Result", ["id", "f", "args", "value", "vargs"])


class WorkerProcess(Process):
    """Calls functions with arguments, both given by a queue."""
    def __init__(self, worker_id, queue_tasks, queue_results):
        self._worker_id = worker_id
        self._queue_tasks = queue_tasks
        self._queue_results = queue_results
        super(WorkerProcess, self).__init__()

    @property
    def worker_id(self):
        """Property for the worker_id attribute of this class."""
        return self._worker_id

    @property
    def queue_tasks(self):
        """Property for the tasks attribute of this class."""
        return self._queue_tasks

    @property
    def queue_results(self):
        """Property for the results attribute of this class."""
        return self._queue_results

    def run(self):
        for task in iter(self.queue_tasks.get, None):
            value = call(task.f, task.args)
            self.queue_results.put(Result(id=self._worker_id, f=task.f,
                                          args=task.args, value=value,
                                          vargs=task.vargs))
        print('Worker terminating')
        self.queue_results.put(Result(id=self._worker_id, f=None,
                                          args=None, vargs=None, value=None))
